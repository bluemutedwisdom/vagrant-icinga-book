/******************************************************************************
 * Icinga 2                                                                   *
 * Copyright (C) 2012-2016 Icinga Development Team (https://www.icinga.org/)  *
 *                                                                            *
 * This program is free software; you can redistribute it and/or              *
 * modify it under the terms of the GNU General Public License                *
 * as published by the Free Software Foundation; either version 2             *
 * of the License, or (at your option) any later version.                     *
 *                                                                            *
 * This program is distributed in the hope that it will be useful,            *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
 * GNU General Public License for more details.                               *
 *                                                                            *
 * You should have received a copy of the GNU General Public License          *
 * along with this program; if not, write to the Free Software Foundation     *
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA.             *
 ******************************************************************************/

globals.nrpe_prefix = function(prefix, pmacro) {
	return function() use (prefix, pmacro) {
		var values = macro(pmacro)
		if (typeof(values) == Array) {
			var result = []
			for (value  in values) {
				result += [ prefix + value ]
			}
			return result
		} else {
			return [ prefix + values ]
		}
	}
}

template CheckCommand "nrpe-legacy" {
	import "nrpe"

	arguments += {
		"-a" = {
			set_if = "$nrpe_args$"
			order = 1
		}
		"arguments" = {
			value = "$nrpe_arguments$"
			skip_key = true
			order = 2
		}
		"show-all" = {
			set_if = "$nrpe_showall$"
			skip_key = true
			value = "show-all"
			order = 4
		}
	}

	vars.nrpe_args = true
	vars.nrpe_showall = false
}

object CheckCommand "nrpe-legacy-counter" {
	import "nrpe-legacy"

	arguments += {
		"counter" = {
			value = nrpe_prefix("counter=", "$nscp_counter_name$")
			skip_key = true
			required = true
			order = 2
		}
		"warning" = {
			value = "warning=value $nrpe_counter_op$ $nscp_counter_warning$"
			skip_key = true
			order = 3
		}
		"critical" = {
			value = "critical=value $nrpe_counter_op$ $nscp_counter_critical$"
			skip_key = true
			order = 3
		}
	}

	vars.nrpe_counter_op = {{
		if (macro("$nscp_counter_less$")) {
			return "<"
		} else {
			return ">"
		}
	}}

	vars.nrpe_command = "check_pdh"
	vars.nrpe_arguments = "$nscp_counter_arguments$"
	vars.nrpe_showall = "$nscp_counter_showall$"
	vars.nscp_counter_less = false
}

object CheckCommand "nrpe-legacy-service" {
	import "nrpe-legacy"

	arguments += {
		"service" = {
			value = nrpe_prefix("service=", "$nscp_service_name$")
			skip_key = true
			order = 2
		}
		"ok" = {
			value = "ok=$nscp_service_otype$='$nscp_service_ok$'"
			skip_key = true
			order = 3
		}
		"warning" = {
			value = "warning=$nscp_service_wtype$='$nscp_service_warning$'"
			skip_key = true
			order = 3
		}
		"critical" = {
			value = "critical=$nscp_service_ctype$='$nscp_service_critical$'"
			skip_key = true
			order = 3
		}
	}

	vars.nrpe_command = "check_service"
	vars.nrpe_arguments = "$nscp_service_arguments$"
	vars.nrpe_showall = "$nscp_service_showall$"

	vars.nscp_service_showall = true
	vars.nscp_service_type = "state"
	vars.nscp_service_otype = vars.nrpe_service_type
	vars.nscp_service_wtype = vars.nrpe_service_type
	vars.nscp_service_ctype = vars.nrpe_service_type
}

object CheckCommand "nrpe-legacy-cpu" {
	import "nrpe-legacy"

	arguments += {
		"time" = {
			value = nrpe_prefix("time=", "$nscp_cpu_time$")
			skip_key = true
			order = 2
		}
		"warning" = {
			value = "warning=load > $nscp_cpu_warning$"
			skip_key = true
			order = 3
		}
		"critical" = {
			value = "critical=load > $nscp_cpu_critical$"
			skip_key = true
			order = 3
		}
	}

	vars.nrpe_command = "check_cpu"
	vars.nrpe_arguments = "$nscp_cpu_arguments$"
	vars.nrpe_showall = "$nscp_cpu_showall$"

	vars.nscp_cpu_time = [ "1m", "5m", "15m" ]
	vars.nscp_cpu_showall = true
	vars.nscp_cpu_warning = 80
	vars.nscp_cpu_critical = 90
}

object CheckCommand "nrpe-legacy-memory" {
	import "nrpe-legacy"

	arguments += {
		"type=committed" = {
			set_if = "$nscp_memory_committed$"
			value = "type=committed"
			skip_key = true
			order = 2
		}
		"type=physical" = {
			set_if = "$nscp_memory_physical$"
			value = "type=physical"
			skip_key = true
			order = 2
		}
		"warning" = {
			value = "warning=$nrpe_memory_op$ $nscp_memory_warning$"
			skip_key = true
			order = 3
		}
		"critical" = {
			value = "critical=$nrpe_memory_op$ $nscp_memory_critical$"
			skip_key = true
			order = 3
		}
	}

	vars.nrpe_command = "check_memory"
	vars.nrpe_arguments = "$nscp_memory_arguments$"
	vars.nrpe_showall = "$nscp_memory_showall$"

	vars.nrpe_memory_op = {{
		if (macro("$nscp_memory_free$")) {
			return "free <"
		} else {
			return "used >"
		}
	}}

	vars.nscp_memory_showall = true
	vars.nscp_memory_physical = true
	vars.nscp_memory_committed = false
	vars.nscp_memory_free = true
	vars.nscp_memory_warning = {{
		if (!macro("$nscp_memory_free$")) {
      return 80
    } else {
      return 20
    }
	}}
	vars.nscp_memory_critical = {{
		if (!macro("$nscp_memory_free$")) {
      return 90
    } else {
      return 10
    }
	}}
}

object CheckCommand "nrpe-legacy-disk" {
	import "nrpe-legacy"

	arguments += {
		"warning" = {
			value = "warning=$nrpe_disk_op$ $nscp_disk_warning$"
			skip_key = true
			order = 1
		}
		"critical" = {
			value = "critical=$nrpe_disk_op$ $nscp_disk_critical$"
			skip_key = true
			order = 1
		}
		"drive" = {
			value = nrpe_prefix("drive=", "$nscp_disk_drive$")
			skip_key = true
			order = 3
		}
	}

	vars.nrpe_command = "check_drivesize"
	vars.nrpe_arguments = "$nscp_disk_arguments$"
	vars.nrpe_showall = "$nscp_disk_showall$"

	vars.nrpe_disk_op = {{
		if (macro("$nscp_disk_free$")) {
			return "free <"
		} else {
			return "used >"
		}
	}}

	vars.nscp_disk_showall = true
	vars.nscp_disk_free = false
	vars.nscp_disk_warning = {{
		if (!macro("$nscp_disk_free$")) {
      return 80
    } else {
      return 20
    }
	}}
	vars.nscp_disk_critical = {{
		if (!macro("$nscp_disk_free$")) {
      return 90
    } else {
      return 10
    }
	}}
}

object CheckCommand "nrpe-legacy-time" {
	import "nrpe-legacy"

	vars.nrpe_command = "check_time"
  vars.ntp_address = "$check_address$"
  vars.ntp_warning = 60
  vars.ntp_critical = 120
  vars.nrpe_arguments = "$ntp_address$ $ntp_warning$ $ntp_critical$"
}
